import logging
import asyncio
import httpx
import io
import base64
import traceback
import time
import signal
import os
from datetime import datetime

from aiogram import Bot, Dispatcher, F
from aiogram.filters import Command
from aiogram.types import Message, KeyboardButton, ReplyKeyboardMarkup, Update, ErrorEvent, InputFile

from config import BOT_TOKEN, VIP_CHANNEL_ID, GEMINI_API_KEY

logging.basicConfig(level=logging.INFO)

bot = Bot(token=BOT_TOKEN, parse_mode="HTML")
dp = Dispatcher()

# –î–æ–±–∞–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏—Å–∫–ª—é—á–µ–Ω–∏–π
@dp.errors()
async def error_handler(event: ErrorEvent):
    logging.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ: {event.exception}")
    logging.error(f"–¢—Ä–µ–π—Å–±–µ–∫: {traceback.format_exc()}")
    # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    update = event.update
    if update and update.message:
        try:
            await bot.send_message(
                chat_id=update.message.chat.id,
                text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ –±–æ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start."
            )
        except Exception as e:
            logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ: {e}")

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
last_successful_update = time.time()
health_check_interval = 300  # 5 –º–∏–Ω—É—Ç
max_inactive_time = 600  # 10 –º–∏–Ω—É—Ç –±–µ–∑ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Å—á–∏—Ç–∞–µ–º –ø—Ä–æ–±–ª–µ–º–æ–π

# –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–µ—Å—Å–∏–π
# –•—Ä–∞–Ω–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π: dict[user_id, list[str]]
user_sessions: dict[int, list[str]] = {}

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞
keyboard_main = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üÜï –ù–æ–≤–∞—è —Å–µ—Å—Å–∏—è"), KeyboardButton(text="üÜò –ü–æ–º–æ—â—å")],
        [KeyboardButton(text="ü§ñ –û –±–æ—Ç–µ"), KeyboardButton(text="üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –∞–≤—Ç–æ—Ä–æ–º")],
    ],
    resize_keyboard=True,
    one_time_keyboard=False
)

@dp.message(Command("start"))
async def cmd_start(message: Message):
    user_id = message.from_user.id
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—É—Å—Ç–∏–ª –∫–æ–º–∞–Ω–¥—É /start")
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ VIP-–∫–∞–Ω–∞–ª–µ
    try:
        member = await bot.get_chat_member(chat_id=VIP_CHANNEL_ID, user_id=user_id)
        if member.status in ["creator", "administrator", "member"]:
            logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø")
            await message.answer(
                "<b>–ü—Ä–∏–≤–µ—Ç!</b> –Ø –±–æ—Ç –¥–ª—è –æ–±—â–µ–Ω–∏—è —Å –ò–ò —á–µ—Ä–µ–∑ <i>Google Gemini API</i>. –û—Ç–≤–µ—á–∞—é –ø–æ-—Ä—É—Å—Å–∫–∏ –∏ –∫—Ä–∞—Ç–∫–æ.\n\n"
                "–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.",
                reply_markup=keyboard_main
            )
        else:
            raise Exception("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ VIP-–∫–∞–Ω–∞–ª")
    except Exception as e:
        logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø–∞: {str(e)}")
        await message.answer(
            "–î–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É –ø–ª–∞—Ç–Ω—ã–π (150‚ÇΩ/–º–µ—Å).\n"
            "–ü–æ–ª—É—á–∏ —Å—Å—ã–ª–∫—É —É @sadea12 –∏ –≤—Å—Ç—É–ø–∏ –≤ VIP-–∫–∞–Ω–∞–ª –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏."
        )

@dp.message((F.text & ~F.text.in_(['üÜï –ù–æ–≤–∞—è —Å–µ—Å—Å–∏—è', 'üÜò –ü–æ–º–æ—â—å', 'ü§ñ –û –±–æ—Ç–µ', 'üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –∞–≤—Ç–æ—Ä–æ–º'])) | F.photo)
async def handle_user_message(message: Message):
    user_id = message.from_user.id
    logging.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏
    try:
        member = await bot.get_chat_member(chat_id=VIP_CHANNEL_ID, user_id=user_id)
        if member.status not in ["creator", "administrator", "member"]:
            raise Exception("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ VIP-–∫–∞–Ω–∞–ª")
    except Exception as e:
        logging.info(f"–û—Ç–∫–∞–∑–∞–Ω–æ –≤ –¥–æ—Å—Ç—É–ø–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {str(e)}")
        await message.answer(
            "–î–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É –ø–ª–∞—Ç–Ω—ã–π (150‚ÇΩ/–º–µ—Å).\n"
            "–ü–æ–ª—É—á–∏ —Å—Å—ã–ª–∫—É —É @sadea12 –∏ –≤—Å—Ç—É–ø–∏ –≤ VIP-–∫–∞–Ω–∞–ª –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏."
        )
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    if message.photo:
        logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–ø—Ä–∞–≤–∏–ª —Ñ–æ—Ç–æ")
        photo = message.photo[-1]
        buffer: io.BytesIO = await bot.download(photo)
        buffer.seek(0)
        img_b64 = base64.b64encode(buffer.read()).decode()
        user_input = (message.caption + "\n" if message.caption else "") + f"data:image/jpeg;base64,{img_b64}"
    else:
        logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–ø—Ä–∞–≤–∏–ª —Ç–µ–∫—Å—Ç: {message.text[:30]}...")
        user_input = message.text

    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
    session = user_sessions.setdefault(user_id, [])
    session.append(user_input)
    context_str = "\n".join(session)
    while len(context_str) > 1024:
        session.pop(0)
        context_str = "\n".join(session)

    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è OpenRouter
    messages = [
        {"role": "system", "content": "–¢—ã –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç, –æ—Ç–≤–µ—á–∞–π –ø–æ-—Ä—É—Å—Å–∫–∏ –∏ –∫—Ä–∞—Ç–∫–æ."},
        {"role": "user", "content": context_str}
    ]

    # –ó–∞–ø—Ä–æ—Å –∫ Google Gemini API
    try:
        logging.info(f"–ó–∞–ø—Ä–æ—Å –∫ Google Gemini API –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        payload = {"contents": [{"parts": [{"text": context_str}]}]}
        url = f"https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key={GEMINI_API_KEY}"
        async with httpx.AsyncClient(timeout=120.0) as client:
            resp = await client.post(url, json=payload)
            resp.raise_for_status()
            data = resp.json()
        logging.info(f"–û—Ç–≤–µ—Ç Google Gemini API: {data}")
        try:
            if "candidates" not in data or len(data["candidates"]) == 0:
                logging.error(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ API Gemini: {data}")
                await message.answer("–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç Gemini API.", reply_markup=keyboard_main)
                return
            
            candidate = data["candidates"][0]
            if "content" in candidate and "parts" in candidate["content"] and len(candidate["content"]["parts"]) > 0:
                answer = candidate["content"]["parts"][0]["text"]
            else:
                logging.error(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø–æ–ª—è content –≤ API Gemini: {candidate}")
                await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç Gemini API.", reply_markup=keyboard_main)
                return
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞ Gemini API: {e}")
            await message.answer("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞ –æ—Ç Gemini API.", reply_markup=keyboard_main)
            return
        logging.info(f"–ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç Gemini API –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ Gemini API: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ Gemini API.", reply_markup=keyboard_main)
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç
    session.append(answer)
    formatted_answer = f"üí° <b>–û—Ç–≤–µ—Ç –ò–ò:</b>\n{answer}"
    logging.info(f"–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç: –µ—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ —Ñ–∞–π–ª–µ .md
    if len(formatted_answer) > 4000:
        buffer = io.BytesIO()
        buffer.write(answer.encode('utf-8'))
        buffer.seek(0)
        filename = f"response_{user_id}_{int(time.time())}.md"
        try:
            input_file = InputFile(buffer, filename)
            await bot.send_document(
                chat_id=message.chat.id,
                document=input_file,
                caption="–û—Ç–≤–µ—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π, –æ—Ç–ø—Ä–∞–≤–ª—è—é –≤ —Ñ–∞–π–ª–µ .md",
                reply_markup=keyboard_main
            )
            logging.info(f"–î–æ–∫—É–º–µ–Ω—Ç —Å –æ—Ç–≤–µ—Ç–æ–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
            await message.answer(answer, reply_markup=keyboard_main)
    else:
        try:
            await message.answer(
                formatted_answer,
                reply_markup=keyboard_main
            )
            logging.info(f"–û—Ç–≤–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
            # –ü—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            try:
                await message.answer(answer, reply_markup=keyboard_main)
            except Exception as e2:
                logging.error(f"–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞: {e2}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫
@dp.message(F.text == "üÜï –ù–æ–≤–∞—è —Å–µ—Å—Å–∏—è")
async def cmd_new_session(message: Message):
    user_id = message.from_user.id
    logging.info(f"cmd_new_session triggered by user {user_id}")
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é")
    # –°–±—Ä–æ—Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_sessions[user_id] = []
    try:
        await message.answer(
            "–ù–æ–≤–∞—è —Å–µ—Å—Å–∏—è –Ω–∞—á–∞—Ç–∞. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –¥–∏–∞–ª–æ–≥.",
            reply_markup=keyboard_main
        )
        logging.info(f"–°–µ—Å—Å–∏—è —É—Å–ø–µ—à–Ω–æ —Å–±—Ä–æ—à–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ —Å–µ—Å—Å–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {str(e)}")

@dp.message(F.text == "ü§ñ –û –±–æ—Ç–µ")
async def cmd_about_bot(message: Message):
    user_id = message.from_user.id
    logging.info(f"cmd_about_bot triggered by user {user_id}")
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ")
    try:
        await message.answer(
            "<b>ü§ñ –û –±–æ—Ç–µ</b>\n"
            "–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–∑–≤–æ–ª—è–µ—Ç –æ–±—â–∞—Ç—å—Å—è —Å –ò–ò –Ω–∞ –±–∞–∑–µ <i>Google Gemini API</i>. –û—Ç–≤–µ—á–∞—é –ø–æ-—Ä—É—Å—Å–∫–∏ –∏ –∫—Ä–∞—Ç–∫–æ.",
            reply_markup=keyboard_main
        )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {str(e)}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ '–ü–æ–º–æ—â—å' –∏ '–°–≤—è–∑–∞—Ç—å—Å—è —Å –∞–≤—Ç–æ—Ä–æ–º'
@dp.message(F.text == "üÜò –ü–æ–º–æ—â—å")
async def cmd_help(message: Message):
    user_id = message.from_user.id
    logging.info(f"cmd_help triggered by user {user_id}")
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª –ø–æ–º–æ—â—å")
    try:
        await message.answer(
            "<b>üÜò –ü–æ–º–æ—â—å</b>\n"
            "1. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ —Ñ–æ—Ç–æ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –ò–ò.\n"
            "2. üÜï –ù–æ–≤–∞—è —Å–µ—Å—Å–∏—è ‚Äî —Å–±—Ä–æ—Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–∏–∞–ª–æ–≥–∞.\n"
            "3. ü§ñ –û –±–æ—Ç–µ ‚Äî –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö.\n"
            "4. üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –∞–≤—Ç–æ—Ä–æ–º ‚Äî –∫–æ–Ω—Ç–∞–∫—Ç —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞.",
            reply_markup=keyboard_main
        )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {str(e)}")

@dp.message(F.text == "üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –∞–≤—Ç–æ—Ä–æ–º")
async def cmd_contact(message: Message):
    user_id = message.from_user.id
    logging.info(f"cmd_contact triggered by user {user_id}")
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª –∫–æ–Ω—Ç–∞–∫—Ç –∞–≤—Ç–æ—Ä–∞")
    try:
        await message.answer(
            "<b>üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –∞–≤—Ç–æ—Ä–æ–º</b>\n"
            "–ù–∞–ø–∏—à–∏—Ç–µ –∞–≤—Ç–æ—Ä—É: <a href=\"https://t.me/sadea12\">@sadea12</a>",
            reply_markup=keyboard_main
        )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–æ–Ω—Ç–∞–∫—Ç–∞ –∞–≤—Ç–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {str(e)}")

if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ long-polling (–±–µ–∑ webhook)
    logging.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ long-polling")
    asyncio.run(dp.start_polling(bot, skip_updates=True)) 