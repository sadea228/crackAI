import logging
import asyncio
import httpx
import io
import base64

from aiogram import Bot, Dispatcher, F
from aiogram.filters import Command
from aiogram.types import Message, KeyboardButton, ReplyKeyboardMarkup, Update

from config import BOT_TOKEN, OPENROUTER_API_KEY, VIP_CHANNEL_ID, WEBHOOK_URL, PORT
from fastapi import FastAPI, Request, Response
import uvicorn
from contextlib import asynccontextmanager

logging.basicConfig(level=logging.INFO)

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

@asynccontextmanager
async def lifespan(app: FastAPI):
    # –ö–æ–¥, –≤—ã–ø–æ–ª–Ω—è–µ–º—ã–π –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    logging.info("–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–µ–±—Ö—É–∫...")
    await bot.set_webhook(WEBHOOK_URL + "/webhook")
    yield
    # –ö–æ–¥, –≤—ã–ø–æ–ª–Ω—è–µ–º—ã–π –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    logging.info("–£–¥–∞–ª—è–µ–º –≤–µ–±—Ö—É–∫...")
    await bot.delete_webhook()

# –°–æ–∑–¥–∞—ë–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ FastAPI —Å health check endpoint
app = FastAPI(lifespan=lifespan)

@app.get("/")
async def root():
    return {"status": "ok"}

@app.head("/")
async def head_root():
    return Response(status_code=200)

# –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–µ—Å—Å–∏–π
# –•—Ä–∞–Ω–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π: dict[user_id, list[str]]
user_sessions: dict[int, list[str]] = {}

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞
keyboard_main = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–ù–æ–≤–∞—è —Å–µ—Å—Å–∏—è"), KeyboardButton(text="–ü–æ–º–æ—â—å")],
        [KeyboardButton(text="–û –±–æ—Ç–µ"), KeyboardButton(text="–°–≤—è–∑–∞—Ç—å—Å—è —Å –∞–≤—Ç–æ—Ä–æ–º")],
    ],
    resize_keyboard=True
)

@app.post("/webhook")
async def webhook_handler(request: Request):
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç Telegram
    data = await request.json()
    update = Update.model_validate(data)
    await dp.feed_update(bot, update)
    return {"ok": True}

@dp.message(Command("start"))
async def cmd_start(message: Message):
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ VIP-–∫–∞–Ω–∞–ª–µ
    try:
        member = await bot.get_chat_member(chat_id=VIP_CHANNEL_ID, user_id=message.from_user.id)
        if member.status in ["creator", "administrator", "member"]:
            await message.answer(
                "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –æ–±—â–µ–Ω–∏—è —Å –ò–ò. –û—Ç–ø—Ä–∞–≤—å —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.",
                reply_markup=keyboard_main
            )
        else:
            raise Exception
    except Exception:
        await message.answer(
            "–î–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É –ø–ª–∞—Ç–Ω—ã–π (150‚ÇΩ/–º–µ—Å).\n"
            "–ü–æ–ª—É—á–∏ —Å—Å—ã–ª–∫—É —É @sadea12 –∏ –≤—Å—Ç—É–ø–∏ –≤ VIP-–∫–∞–Ω–∞–ª –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏."
        )

@dp.message((F.text & ~F.text.in_(['–ù–æ–≤–∞—è —Å–µ—Å—Å–∏—è', '–û –±–æ—Ç–µ', '–û –Ω–∞—Å', '–ü–æ–º–æ—â—å', '–°–≤—è–∑–∞—Ç—å—Å—è —Å –∞–≤—Ç–æ—Ä–æ–º'])) | F.photo)
async def handle_user_message(message: Message):
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏
    try:
        member = await bot.get_chat_member(chat_id=VIP_CHANNEL_ID, user_id=message.from_user.id)
        if member.status not in ["creator", "administrator", "member"]:
            raise Exception
    except Exception:
        await message.answer(
            "–î–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É –ø–ª–∞—Ç–Ω—ã–π (150‚ÇΩ/–º–µ—Å).\n"
            "–ü–æ–ª—É—á–∏ —Å—Å—ã–ª–∫—É —É @sadea12 –∏ –≤—Å—Ç—É–ø–∏ –≤ VIP-–∫–∞–Ω–∞–ª –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏."
        )
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    if message.photo:
        photo = message.photo[-1]
        buffer: io.BytesIO = await bot.download(photo)
        buffer.seek(0)
        img_b64 = base64.b64encode(buffer.read()).decode()
        user_input = (message.caption + "\n" if message.caption else "") + f"data:image/jpeg;base64,{img_b64}"
    else:
        user_input = message.text

    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
    session = user_sessions.setdefault(message.from_user.id, [])
    session.append(user_input)
    context_str = "\n".join(session)
    while len(context_str) > 1024:
        session.pop(0)
        context_str = "\n".join(session)

    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è OpenRouter
    messages = [
        {"role": "system", "content": "–¢—ã –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç, –æ—Ç–≤–µ—á–∞–π –ø–æ-—Ä—É—Å—Å–∫–∏ –∏ –∫—Ä–∞—Ç–∫–æ."},
        {"role": "user", "content": context_str}
    ]

    # –ó–∞–ø—Ä–æ—Å –∫ OpenRouter —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
    max_retries = 3
    retry_delay = 2
    
    for attempt in range(max_retries):
        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–∏ –ø–µ—Ä–≤–æ–π –ø–æ–ø—ã—Ç–∫–µ
            if attempt == 0:
                await message.answer("‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –æ—Ç–≤–µ—Ç...", reply_markup=keyboard_main)
            
            # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
            async with httpx.AsyncClient(timeout=120.0) as client:
                resp = await client.post(
                    "https://openrouter.ai/api/v1/chat/completions",
                    headers={
                        "Authorization": f"Bearer {OPENROUTER_API_KEY}", 
                        "Content-Type": "application/json",
                        "HTTP-Referer": WEBHOOK_URL # –†–µ—Ñ–µ—Ä–µ—Ä—ã –¥–ª—è OpenRouter
                    },
                    json={
                        "model": "qwen/qwen3-235b-a22b:free", 
                        "messages": messages,
                        "temperature": 0.7,
                        "max_tokens": 800
                    }
                )
                resp.raise_for_status()
                data = resp.json()
                answer = data["choices"][0]["message"]["content"]
                # –£—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç, –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Ü–∏–∫–ª–∞
                break
                
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ OpenRouter (–ø–æ–ø—ã—Ç–∫–∞ {attempt+1}/{max_retries}): {str(e)}")
            if attempt == max_retries - 1:
                # –ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å
                await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ –ò–ò. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
                return
            # –ñ–¥–µ–º –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π
            await asyncio.sleep(retry_delay)
            # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–∏
            retry_delay *= 2

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç
    session.append(answer)
    formatted_answer = f"üí° <b>–û—Ç–≤–µ—Ç –ò–ò:</b>\n{answer}"
    await message.answer(
        formatted_answer,
        parse_mode='HTML',
        reply_markup=keyboard_main
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫
@dp.message(F.text == "–ù–æ–≤–∞—è —Å–µ—Å—Å–∏—è")
async def cmd_new_session(message: Message):
    # –°–±—Ä–æ—Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_sessions[message.from_user.id] = []
    await message.answer(
        "–ù–æ–≤–∞—è —Å–µ—Å—Å–∏—è –Ω–∞—á–∞—Ç–∞. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –¥–∏–∞–ª–æ–≥.",
        reply_markup=keyboard_main
    )

@dp.message(F.text.in_(['–û –±–æ—Ç–µ', '–û –Ω–∞—Å']))
async def cmd_about_bot(message: Message):
    await message.answer(
        "–Ø –±–æ—Ç –¥–ª—è –æ–±—â–µ–Ω–∏—è —Å –ò–ò —á–µ—Ä–µ–∑ OpenRouter. –û—Ç–≤–µ—á–∞—é –ø–æ-—Ä—É—Å—Å–∫–∏ –∏ –∫—Ä–∞—Ç–∫–æ.",
        reply_markup=keyboard_main
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ '–ü–æ–º–æ—â—å' –∏ '–°–≤—è–∑–∞—Ç—å—Å—è —Å –∞–≤—Ç–æ—Ä–æ–º'
@dp.message(F.text == "–ü–æ–º–æ—â—å")
async def cmd_help(message: Message):
    await message.answer(
        "–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É, –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ —Ñ–æ—Ç–æ. –ö–Ω–æ–ø–∫–∞ '–ù–æ–≤–∞—è —Å–µ—Å—Å–∏—è' —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç –¥–∏–∞–ª–æ–≥, '–û –±–æ—Ç–µ' ‚Äî –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ, '–°–≤—è–∑–∞—Ç—å—Å—è —Å –∞–≤—Ç–æ—Ä–æ–º' ‚Äî –∫–æ–Ω—Ç–∞–∫—Ç –∞–≤—Ç–æ—Ä–∞.",
        reply_markup=keyboard_main
    )

@dp.message(F.text == "–°–≤—è–∑–∞—Ç—å—Å—è —Å –∞–≤—Ç–æ—Ä–æ–º")
async def cmd_contact(message: Message):
    await message.answer(
        "–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, –Ω–∞–ø–∏—à–∏—Ç–µ @sadea12.",
        reply_markup=keyboard_main
    )

if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫ FastAPI —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è webhook
    uvicorn.run("main:app", host="0.0.0.0", port=PORT) 